using System;

namespace System.Text
{
	// Token: 0x0200036C RID: 876
	internal sealed class EncoderLatin1BestFitFallbackBuffer : EncoderFallbackBuffer
	{
		// Token: 0x06002DFF RID: 11775 RVA: 0x0015B290 File Offset: 0x0015A490
		public override bool Fallback(char charUnknown, int index)
		{
			this._iCount = (this._iSize = 1);
			this._cBestFit = this.TryBestFit(charUnknown);
			if (this._cBestFit == '\0')
			{
				this._cBestFit = '?';
			}
			return true;
		}

		// Token: 0x06002E00 RID: 11776 RVA: 0x0015B2CC File Offset: 0x0015A4CC
		public override bool Fallback(char charUnknownHigh, char charUnknownLow, int index)
		{
			if (!char.IsHighSurrogate(charUnknownHigh))
			{
				throw new ArgumentOutOfRangeException("charUnknownHigh", SR.Format(SR.ArgumentOutOfRange_Range, 55296, 56319));
			}
			if (!char.IsLowSurrogate(charUnknownLow))
			{
				throw new ArgumentOutOfRangeException("charUnknownLow", SR.Format(SR.ArgumentOutOfRange_Range, 56320, 57343));
			}
			this._cBestFit = '?';
			this._iCount = (this._iSize = 2);
			return true;
		}

		// Token: 0x06002E01 RID: 11777 RVA: 0x0015B354 File Offset: 0x0015A554
		public override char GetNextChar()
		{
			this._iCount--;
			if (this._iCount < 0)
			{
				return '\0';
			}
			if (this._iCount == 2147483647)
			{
				this._iCount = -1;
				return '\0';
			}
			return this._cBestFit;
		}

		// Token: 0x06002E02 RID: 11778 RVA: 0x0015B38B File Offset: 0x0015A58B
		public override bool MovePrevious()
		{
			if (this._iCount >= 0)
			{
				this._iCount++;
			}
			return this._iCount >= 0 && this._iCount <= this._iSize;
		}

		// Token: 0x17000930 RID: 2352
		// (get) Token: 0x06002E03 RID: 11779 RVA: 0x0015B3C0 File Offset: 0x0015A5C0
		public override int Remaining
		{
			get
			{
				if (this._iCount <= 0)
				{
					return 0;
				}
				return this._iCount;
			}
		}

		// Token: 0x06002E04 RID: 11780 RVA: 0x0015B3D3 File Offset: 0x0015A5D3
		public override void Reset()
		{
			this._iCount = -1;
			this.charStart = null;
			this.bFallingBack = false;
		}

		// Token: 0x06002E05 RID: 11781 RVA: 0x0015B3EC File Offset: 0x0015A5EC
		private char TryBestFit(char cUnknown)
		{
			int num = 0;
			int num2 = EncoderLatin1BestFitFallbackBuffer.s_arrayCharBestFit.Length;
			int num3;
			while ((num3 = num2 - num) > 6)
			{
				int i = num3 / 2 + num & 65534;
				char c = EncoderLatin1BestFitFallbackBuffer.s_arrayCharBestFit[i];
				if (c == cUnknown)
				{
					return EncoderLatin1BestFitFallbackBuffer.s_arrayCharBestFit[i + 1];
				}
				if (c < cUnknown)
				{
					num = i;
				}
				else
				{
					num2 = i;
				}
			}
			for (int i = num; i < num2; i += 2)
			{
				if (EncoderLatin1BestFitFallbackBuffer.s_arrayCharBestFit[i] == cUnknown)
				{
					return EncoderLatin1BestFitFallbackBuffer.s_arrayCharBestFit[i + 1];
				}
			}
			return '\0';
		}

		// Token: 0x04000CB1 RID: 3249
		private char _cBestFit;

		// Token: 0x04000CB2 RID: 3250
		private int _iCount = -1;

		// Token: 0x04000CB3 RID: 3251
		private int _iSize;

		// Token: 0x04000CB4 RID: 3252
		private static readonly char[] s_arrayCharBestFit = new char[]
		{
			'Ā',
			'A',
			'ā',
			'a',
			'Ă',
			'A',
			'ă',
			'a',
			'Ą',
			'A',
			'ą',
			'a',
			'Ć',
			'C',
			'ć',
			'c',
			'Ĉ',
			'C',
			'ĉ',
			'c',
			'Ċ',
			'C',
			'ċ',
			'c',
			'Č',
			'C',
			'č',
			'c',
			'Ď',
			'D',
			'ď',
			'd',
			'Đ',
			'D',
			'đ',
			'd',
			'Ē',
			'E',
			'ē',
			'e',
			'Ĕ',
			'E',
			'ĕ',
			'e',
			'Ė',
			'E',
			'ė',
			'e',
			'Ę',
			'E',
			'ę',
			'e',
			'Ě',
			'E',
			'ě',
			'e',
			'Ĝ',
			'G',
			'ĝ',
			'g',
			'Ğ',
			'G',
			'ğ',
			'g',
			'Ġ',
			'G',
			'ġ',
			'g',
			'Ģ',
			'G',
			'ģ',
			'g',
			'Ĥ',
			'H',
			'ĥ',
			'h',
			'Ħ',
			'H',
			'ħ',
			'h',
			'Ĩ',
			'I',
			'ĩ',
			'i',
			'Ī',
			'I',
			'ī',
			'i',
			'Ĭ',
			'I',
			'ĭ',
			'i',
			'Į',
			'I',
			'į',
			'i',
			'İ',
			'I',
			'ı',
			'i',
			'Ĵ',
			'J',
			'ĵ',
			'j',
			'Ķ',
			'K',
			'ķ',
			'k',
			'Ĺ',
			'L',
			'ĺ',
			'l',
			'Ļ',
			'L',
			'ļ',
			'l',
			'Ľ',
			'L',
			'ľ',
			'l',
			'Ł',
			'L',
			'ł',
			'l',
			'Ń',
			'N',
			'ń',
			'n',
			'Ņ',
			'N',
			'ņ',
			'n',
			'Ň',
			'N',
			'ň',
			'n',
			'Ō',
			'O',
			'ō',
			'o',
			'Ŏ',
			'O',
			'ŏ',
			'o',
			'Ő',
			'O',
			'ő',
			'o',
			'Œ',
			'O',
			'œ',
			'o',
			'Ŕ',
			'R',
			'ŕ',
			'r',
			'Ŗ',
			'R',
			'ŗ',
			'r',
			'Ř',
			'R',
			'ř',
			'r',
			'Ś',
			'S',
			'ś',
			's',
			'Ŝ',
			'S',
			'ŝ',
			's',
			'Ş',
			'S',
			'ş',
			's',
			'Š',
			'S',
			'š',
			's',
			'Ţ',
			'T',
			'ţ',
			't',
			'Ť',
			'T',
			'ť',
			't',
			'Ŧ',
			'T',
			'ŧ',
			't',
			'Ũ',
			'U',
			'ũ',
			'u',
			'Ū',
			'U',
			'ū',
			'u',
			'Ŭ',
			'U',
			'ŭ',
			'u',
			'Ů',
			'U',
			'ů',
			'u',
			'Ű',
			'U',
			'ű',
			'u',
			'Ų',
			'U',
			'ų',
			'u',
			'Ŵ',
			'W',
			'ŵ',
			'w',
			'Ŷ',
			'Y',
			'ŷ',
			'y',
			'Ÿ',
			'Y',
			'Ź',
			'Z',
			'ź',
			'z',
			'Ż',
			'Z',
			'ż',
			'z',
			'Ž',
			'Z',
			'ž',
			'z',
			'ƀ',
			'b',
			'Ɖ',
			'D',
			'Ƒ',
			'F',
			'ƒ',
			'f',
			'Ɨ',
			'I',
			'ƚ',
			'l',
			'Ɵ',
			'O',
			'Ơ',
			'O',
			'ơ',
			'o',
			'ƫ',
			't',
			'Ʈ',
			'T',
			'Ư',
			'U',
			'ư',
			'u',
			'ƶ',
			'z',
			'Ǎ',
			'A',
			'ǎ',
			'a',
			'Ǐ',
			'I',
			'ǐ',
			'i',
			'Ǒ',
			'O',
			'ǒ',
			'o',
			'Ǔ',
			'U',
			'ǔ',
			'u',
			'Ǖ',
			'U',
			'ǖ',
			'u',
			'Ǘ',
			'U',
			'ǘ',
			'u',
			'Ǚ',
			'U',
			'ǚ',
			'u',
			'Ǜ',
			'U',
			'ǜ',
			'u',
			'Ǟ',
			'A',
			'ǟ',
			'a',
			'Ǥ',
			'G',
			'ǥ',
			'g',
			'Ǧ',
			'G',
			'ǧ',
			'g',
			'Ǩ',
			'K',
			'ǩ',
			'k',
			'Ǫ',
			'O',
			'ǫ',
			'o',
			'Ǭ',
			'O',
			'ǭ',
			'o',
			'ǰ',
			'j',
			'ɡ',
			'g',
			'ʹ',
			'\'',
			'ʺ',
			'"',
			'ʼ',
			'\'',
			'˄',
			'^',
			'ˆ',
			'^',
			'ˈ',
			'\'',
			'ˉ',
			'?',
			'ˊ',
			'?',
			'ˋ',
			'`',
			'ˍ',
			'_',
			'˚',
			'?',
			'˜',
			'~',
			'̀',
			'`',
			'̂',
			'^',
			'̃',
			'~',
			'̎',
			'"',
			'̱',
			'_',
			'̲',
			'_',
			'\u2000',
			' ',
			'\u2001',
			' ',
			'\u2002',
			' ',
			'\u2003',
			' ',
			'\u2004',
			' ',
			'\u2005',
			' ',
			'\u2006',
			' ',
			'‐',
			'-',
			'‑',
			'-',
			'–',
			'-',
			'—',
			'-',
			'‘',
			'\'',
			'’',
			'\'',
			'‚',
			',',
			'“',
			'"',
			'”',
			'"',
			'„',
			'"',
			'†',
			'?',
			'‡',
			'?',
			'•',
			'.',
			'…',
			'.',
			'‰',
			'?',
			'′',
			'\'',
			'‵',
			'`',
			'‹',
			'<',
			'›',
			'>',
			'™',
			'T',
			'！',
			'!',
			'＂',
			'"',
			'＃',
			'#',
			'＄',
			'$',
			'％',
			'%',
			'＆',
			'&',
			'＇',
			'\'',
			'（',
			'(',
			'）',
			')',
			'＊',
			'*',
			'＋',
			'+',
			'，',
			',',
			'－',
			'-',
			'．',
			'.',
			'／',
			'/',
			'０',
			'0',
			'１',
			'1',
			'２',
			'2',
			'３',
			'3',
			'４',
			'4',
			'５',
			'5',
			'６',
			'6',
			'７',
			'7',
			'８',
			'8',
			'９',
			'9',
			'：',
			':',
			'；',
			';',
			'＜',
			'<',
			'＝',
			'=',
			'＞',
			'>',
			'？',
			'?',
			'＠',
			'@',
			'Ａ',
			'A',
			'Ｂ',
			'B',
			'Ｃ',
			'C',
			'Ｄ',
			'D',
			'Ｅ',
			'E',
			'Ｆ',
			'F',
			'Ｇ',
			'G',
			'Ｈ',
			'H',
			'Ｉ',
			'I',
			'Ｊ',
			'J',
			'Ｋ',
			'K',
			'Ｌ',
			'L',
			'Ｍ',
			'M',
			'Ｎ',
			'N',
			'Ｏ',
			'O',
			'Ｐ',
			'P',
			'Ｑ',
			'Q',
			'Ｒ',
			'R',
			'Ｓ',
			'S',
			'Ｔ',
			'T',
			'Ｕ',
			'U',
			'Ｖ',
			'V',
			'Ｗ',
			'W',
			'Ｘ',
			'X',
			'Ｙ',
			'Y',
			'Ｚ',
			'Z',
			'［',
			'[',
			'＼',
			'\\',
			'］',
			']',
			'＾',
			'^',
			'＿',
			'_',
			'｀',
			'`',
			'ａ',
			'a',
			'ｂ',
			'b',
			'ｃ',
			'c',
			'ｄ',
			'd',
			'ｅ',
			'e',
			'ｆ',
			'f',
			'ｇ',
			'g',
			'ｈ',
			'h',
			'ｉ',
			'i',
			'ｊ',
			'j',
			'ｋ',
			'k',
			'ｌ',
			'l',
			'ｍ',
			'm',
			'ｎ',
			'n',
			'ｏ',
			'o',
			'ｐ',
			'p',
			'ｑ',
			'q',
			'ｒ',
			'r',
			'ｓ',
			's',
			'ｔ',
			't',
			'ｕ',
			'u',
			'ｖ',
			'v',
			'ｗ',
			'w',
			'ｘ',
			'x',
			'ｙ',
			'y',
			'ｚ',
			'z',
			'｛',
			'{',
			'｜',
			'|',
			'｝',
			'}',
			'～',
			'~'
		};
	}
}
