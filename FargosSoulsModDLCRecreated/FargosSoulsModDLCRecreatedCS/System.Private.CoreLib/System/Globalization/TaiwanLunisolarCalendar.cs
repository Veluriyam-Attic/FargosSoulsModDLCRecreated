using System;
using System.Runtime.CompilerServices;

namespace System.Globalization
{
	// Token: 0x02000226 RID: 550
	[NullableContext(1)]
	[Nullable(0)]
	public class TaiwanLunisolarCalendar : EastAsianLunisolarCalendar
	{
		// Token: 0x170007D0 RID: 2000
		// (get) Token: 0x060022F8 RID: 8952 RVA: 0x0013427C File Offset: 0x0013347C
		public override DateTime MinSupportedDateTime
		{
			get
			{
				return TaiwanLunisolarCalendar.s_minDate;
			}
		}

		// Token: 0x170007D1 RID: 2001
		// (get) Token: 0x060022F9 RID: 8953 RVA: 0x00134283 File Offset: 0x00133483
		public override DateTime MaxSupportedDateTime
		{
			get
			{
				return TaiwanLunisolarCalendar.s_maxDate;
			}
		}

		// Token: 0x170007D2 RID: 2002
		// (get) Token: 0x060022FA RID: 8954 RVA: 0x0011FEFD File Offset: 0x0011F0FD
		protected override int DaysInYearBeforeMinSupportedYear
		{
			get
			{
				return 384;
			}
		}

		// Token: 0x170007D3 RID: 2003
		// (get) Token: 0x060022FB RID: 8955 RVA: 0x0013428A File Offset: 0x0013348A
		internal override int MinCalendarYear
		{
			get
			{
				return 1912;
			}
		}

		// Token: 0x170007D4 RID: 2004
		// (get) Token: 0x060022FC RID: 8956 RVA: 0x00130CA8 File Offset: 0x0012FEA8
		internal override int MaxCalendarYear
		{
			get
			{
				return 2050;
			}
		}

		// Token: 0x170007D5 RID: 2005
		// (get) Token: 0x060022FD RID: 8957 RVA: 0x0013427C File Offset: 0x0013347C
		internal override DateTime MinDate
		{
			get
			{
				return TaiwanLunisolarCalendar.s_minDate;
			}
		}

		// Token: 0x170007D6 RID: 2006
		// (get) Token: 0x060022FE RID: 8958 RVA: 0x00134283 File Offset: 0x00133483
		internal override DateTime MaxDate
		{
			get
			{
				return TaiwanLunisolarCalendar.s_maxDate;
			}
		}

		// Token: 0x170007D7 RID: 2007
		// (get) Token: 0x060022FF RID: 8959 RVA: 0x00134291 File Offset: 0x00133491
		[Nullable(new byte[]
		{
			2,
			1
		})]
		internal override EraInfo[] CalEraInfo
		{
			get
			{
				return TaiwanLunisolarCalendar.s_taiwanLunisolarEraInfo;
			}
		}

		// Token: 0x06002300 RID: 8960 RVA: 0x00134298 File Offset: 0x00133498
		internal override int GetYearInfo(int lunarYear, int index)
		{
			if (lunarYear < 1912 || lunarYear > 2050)
			{
				throw new ArgumentOutOfRangeException("year", lunarYear, SR.Format(SR.ArgumentOutOfRange_Range, 1912, 2050));
			}
			return TaiwanLunisolarCalendar.s_yinfo[lunarYear - 1912, index];
		}

		// Token: 0x06002301 RID: 8961 RVA: 0x001342F6 File Offset: 0x001334F6
		internal override int GetYear(int year, DateTime time)
		{
			return this._helper.GetYear(year, time);
		}

		// Token: 0x06002302 RID: 8962 RVA: 0x00134305 File Offset: 0x00133505
		internal override int GetGregorianYear(int year, int era)
		{
			return this._helper.GetGregorianYear(year, era);
		}

		// Token: 0x06002303 RID: 8963 RVA: 0x00134314 File Offset: 0x00133514
		public TaiwanLunisolarCalendar()
		{
			this._helper = new GregorianCalendarHelper(this, TaiwanLunisolarCalendar.s_taiwanLunisolarEraInfo);
		}

		// Token: 0x06002304 RID: 8964 RVA: 0x0013432D File Offset: 0x0013352D
		public override int GetEra(DateTime time)
		{
			return this._helper.GetEra(time);
		}

		// Token: 0x170007D8 RID: 2008
		// (get) Token: 0x06002305 RID: 8965 RVA: 0x000CA38E File Offset: 0x000C958E
		internal override CalendarId BaseCalendarID
		{
			get
			{
				return CalendarId.TAIWAN;
			}
		}

		// Token: 0x170007D9 RID: 2009
		// (get) Token: 0x06002306 RID: 8966 RVA: 0x0013433B File Offset: 0x0013353B
		internal override CalendarId ID
		{
			get
			{
				return CalendarId.TAIWANLUNISOLAR;
			}
		}

		// Token: 0x170007DA RID: 2010
		// (get) Token: 0x06002307 RID: 8967 RVA: 0x0013433F File Offset: 0x0013353F
		public override int[] Eras
		{
			get
			{
				return this._helper.Eras;
			}
		}

		// Token: 0x040008DB RID: 2267
		private static readonly EraInfo[] s_taiwanLunisolarEraInfo = new EraInfo[]
		{
			new EraInfo(1, 1912, 1, 1, 1911, 1, 8088)
		};

		// Token: 0x040008DC RID: 2268
		private readonly GregorianCalendarHelper _helper;

		// Token: 0x040008DD RID: 2269
		private static readonly DateTime s_minDate = new DateTime(1912, 2, 18);

		// Token: 0x040008DE RID: 2270
		private static readonly DateTime s_maxDate = new DateTime(new DateTime(2051, 2, 10, 23, 59, 59, 999).Ticks + 9999L);

		// Token: 0x040008DF RID: 2271
		private static readonly int[,] s_yinfo = new int[,]
		{
			{
				0,
				2,
				18,
				42192
			},
			{
				0,
				2,
				6,
				53840
			},
			{
				5,
				1,
				26,
				54568
			},
			{
				0,
				2,
				14,
				46400
			},
			{
				0,
				2,
				3,
				54944
			},
			{
				2,
				1,
				23,
				38608
			},
			{
				0,
				2,
				11,
				38320
			},
			{
				7,
				2,
				1,
				18872
			},
			{
				0,
				2,
				20,
				18800
			},
			{
				0,
				2,
				8,
				42160
			},
			{
				5,
				1,
				28,
				45656
			},
			{
				0,
				2,
				16,
				27216
			},
			{
				0,
				2,
				5,
				27968
			},
			{
				4,
				1,
				24,
				44456
			},
			{
				0,
				2,
				13,
				11104
			},
			{
				0,
				2,
				2,
				38256
			},
			{
				2,
				1,
				23,
				18808
			},
			{
				0,
				2,
				10,
				18800
			},
			{
				6,
				1,
				30,
				25776
			},
			{
				0,
				2,
				17,
				54432
			},
			{
				0,
				2,
				6,
				59984
			},
			{
				5,
				1,
				26,
				27976
			},
			{
				0,
				2,
				14,
				23248
			},
			{
				0,
				2,
				4,
				11104
			},
			{
				3,
				1,
				24,
				37744
			},
			{
				0,
				2,
				11,
				37600
			},
			{
				7,
				1,
				31,
				51560
			},
			{
				0,
				2,
				19,
				51536
			},
			{
				0,
				2,
				8,
				54432
			},
			{
				6,
				1,
				27,
				55888
			},
			{
				0,
				2,
				15,
				46416
			},
			{
				0,
				2,
				5,
				22176
			},
			{
				4,
				1,
				25,
				43736
			},
			{
				0,
				2,
				13,
				9680
			},
			{
				0,
				2,
				2,
				37584
			},
			{
				2,
				1,
				22,
				51544
			},
			{
				0,
				2,
				10,
				43344
			},
			{
				7,
				1,
				29,
				46248
			},
			{
				0,
				2,
				17,
				27808
			},
			{
				0,
				2,
				6,
				46416
			},
			{
				5,
				1,
				27,
				21928
			},
			{
				0,
				2,
				14,
				19872
			},
			{
				0,
				2,
				3,
				42416
			},
			{
				3,
				1,
				24,
				21176
			},
			{
				0,
				2,
				12,
				21168
			},
			{
				8,
				1,
				31,
				43344
			},
			{
				0,
				2,
				18,
				59728
			},
			{
				0,
				2,
				8,
				27296
			},
			{
				6,
				1,
				28,
				44368
			},
			{
				0,
				2,
				15,
				43856
			},
			{
				0,
				2,
				5,
				19296
			},
			{
				4,
				1,
				25,
				42352
			},
			{
				0,
				2,
				13,
				42352
			},
			{
				0,
				2,
				2,
				21088
			},
			{
				3,
				1,
				21,
				59696
			},
			{
				0,
				2,
				9,
				55632
			},
			{
				7,
				1,
				30,
				23208
			},
			{
				0,
				2,
				17,
				22176
			},
			{
				0,
				2,
				6,
				38608
			},
			{
				5,
				1,
				27,
				19176
			},
			{
				0,
				2,
				15,
				19152
			},
			{
				0,
				2,
				3,
				42192
			},
			{
				4,
				1,
				23,
				53864
			},
			{
				0,
				2,
				11,
				53840
			},
			{
				8,
				1,
				31,
				54568
			},
			{
				0,
				2,
				18,
				46400
			},
			{
				0,
				2,
				7,
				46752
			},
			{
				6,
				1,
				28,
				38608
			},
			{
				0,
				2,
				16,
				38320
			},
			{
				0,
				2,
				5,
				18864
			},
			{
				4,
				1,
				25,
				42168
			},
			{
				0,
				2,
				13,
				42160
			},
			{
				10,
				2,
				2,
				45656
			},
			{
				0,
				2,
				20,
				27216
			},
			{
				0,
				2,
				9,
				27968
			},
			{
				6,
				1,
				29,
				44448
			},
			{
				0,
				2,
				17,
				43872
			},
			{
				0,
				2,
				6,
				38256
			},
			{
				5,
				1,
				27,
				18808
			},
			{
				0,
				2,
				15,
				18800
			},
			{
				0,
				2,
				4,
				25776
			},
			{
				3,
				1,
				23,
				27216
			},
			{
				0,
				2,
				10,
				59984
			},
			{
				8,
				1,
				31,
				27432
			},
			{
				0,
				2,
				19,
				23232
			},
			{
				0,
				2,
				7,
				43872
			},
			{
				5,
				1,
				28,
				37736
			},
			{
				0,
				2,
				16,
				37600
			},
			{
				0,
				2,
				5,
				51552
			},
			{
				4,
				1,
				24,
				54440
			},
			{
				0,
				2,
				12,
				54432
			},
			{
				0,
				2,
				1,
				55888
			},
			{
				2,
				1,
				22,
				23208
			},
			{
				0,
				2,
				9,
				22176
			},
			{
				7,
				1,
				29,
				43736
			},
			{
				0,
				2,
				18,
				9680
			},
			{
				0,
				2,
				7,
				37584
			},
			{
				5,
				1,
				26,
				51544
			},
			{
				0,
				2,
				14,
				43344
			},
			{
				0,
				2,
				3,
				46240
			},
			{
				4,
				1,
				23,
				46416
			},
			{
				0,
				2,
				10,
				44368
			},
			{
				9,
				1,
				31,
				21928
			},
			{
				0,
				2,
				19,
				19360
			},
			{
				0,
				2,
				8,
				42416
			},
			{
				6,
				1,
				28,
				21176
			},
			{
				0,
				2,
				16,
				21168
			},
			{
				0,
				2,
				5,
				43312
			},
			{
				4,
				1,
				25,
				29864
			},
			{
				0,
				2,
				12,
				27296
			},
			{
				0,
				2,
				1,
				44368
			},
			{
				2,
				1,
				22,
				19880
			},
			{
				0,
				2,
				10,
				19296
			},
			{
				6,
				1,
				29,
				42352
			},
			{
				0,
				2,
				17,
				42208
			},
			{
				0,
				2,
				6,
				53856
			},
			{
				5,
				1,
				26,
				59696
			},
			{
				0,
				2,
				13,
				54576
			},
			{
				0,
				2,
				3,
				23200
			},
			{
				3,
				1,
				23,
				27472
			},
			{
				0,
				2,
				11,
				38608
			},
			{
				11,
				1,
				31,
				19176
			},
			{
				0,
				2,
				19,
				19152
			},
			{
				0,
				2,
				8,
				42192
			},
			{
				6,
				1,
				28,
				53848
			},
			{
				0,
				2,
				15,
				53840
			},
			{
				0,
				2,
				4,
				54560
			},
			{
				5,
				1,
				24,
				55968
			},
			{
				0,
				2,
				12,
				46496
			},
			{
				0,
				2,
				1,
				22224
			},
			{
				2,
				1,
				22,
				19160
			},
			{
				0,
				2,
				10,
				18864
			},
			{
				7,
				1,
				30,
				42168
			},
			{
				0,
				2,
				17,
				42160
			},
			{
				0,
				2,
				6,
				43600
			},
			{
				5,
				1,
				26,
				46376
			},
			{
				0,
				2,
				14,
				27936
			},
			{
				0,
				2,
				2,
				44448
			},
			{
				3,
				1,
				23,
				21936
			}
		};
	}
}
